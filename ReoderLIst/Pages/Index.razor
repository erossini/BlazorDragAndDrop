@page "/"
<ul ondragover="event.preventDefault();"
    ondragstart="event.dataTransfer.setData('', event.target.id);">
    @foreach (var item in Models.OrderBy(x => x.Order))
    {
        <li @ondrop="()=>HandleDrop(item)" @key="item">
            <div @ondragleave="@(()=> {item.IsDragOver = false;})"
                @ondragenter="@(()=>{item.IsDragOver = true;})"
                style="@(item.IsDragOver?"border-style: solid none none none; border-color:red;":"")"
                @ondragstart="() => draggingModel = item"
                @ondragend="()=> draggingModel = null" draggable="true">@item.Name</div>
        </li>
    }
</ul>

@code
{
    public List<Model> Models { get; set; } = new();

    public class Model
    {
        public int Order { get; set; }
        public string Name { get; set; } = "";
        public bool IsDragOver{ get; set; } 
    }

    protected override void OnInitialized()
    {
        // fill names with "random" string
        for (var i = 0; i < 10; i++)
        {
            Model m = new() { Order = i, Name = $"Item {i}" };
            Models.Add(m);
        }

        base.OnInitialized();
    }

    private void HandleDrop(Model landingModel)
    {
        // landing model -> where the drop happened
        if (draggingModel is null) return;

        // keep the original order for later
        int originalOrderLanding = landingModel.Order;

        // increase model under landing one by 1
        Models.Where(x => x.Order >= landingModel.Order).ToList().ForEach(x => x.Order++);

        // replace landing model
        draggingModel.Order = originalOrderLanding;

        int ii = 0;
        foreach (var model in Models.OrderBy(x=>x.Order).ToList())
        {
            // keep the numbers from 0 to size-1
            model.Order = ii++;

            // remove drag over. 
            model.IsDragOver = false;
        }
    }

    // the model that is being dragged
    private Model? draggingModel;
}